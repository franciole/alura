João Fulano,123.456.789-00,21 de Maio de 1993,(21) 3079-9987,Rua do Ouvidor,50,20040-030,Rio de Janeiro
Maria Fulana, 98765432100,11 de Abril de 1995,(11) 933339871,Rua Vergueiro,3185,04101-300,São Paulo
denise teste, 987.654.321.00,28 de Dezembro de 1991,(31)45562712,SCS Qd. 8 Bl. B-50,11,70333-900,Rio Grande

João Fulano,123.456.789-00,21 de Maio de 1093,(21) 3079-9987,Rua Buarque de Macedo,67,22220-232,Rio de Janeiro


Testes

\d{3}\.\d{3}\.\d{3}-\d{2}

\d{3}[.-]?\d{3}[.-]?\d{3}[.-]?\d{2}

[0123456789]

[0-9]


\d{3}\.?\d{3}\.?\d{3}[-.]?\d{2}

[1-3]?\d\s+de+\s+[A-Z]?[a-zç]{3,8}\s+de\s+[12]\d{3}


No <code>for</code>, o valor de <code>i</code> começa de zero e é incrementado a cada volta enquanto <code>i < 10</code>, portando o bloco de código do for é executado 10 vezes.
</?code>

123456789
[1-36-9]
Definimos uma classe com os números de 1-3 e 6-9!

horário que siga esse padrão: 19h32min16s.
\d{2}h\d{2}min\d{2}s
[0-9]{2}h[0-9]{2}min[0-9]{2}s

Exemplo de placa: KMG-8089
[A-Z]{3}-\d{4}

9.8 - Robson, 7.1 - Teresa, 4.5 - Armênio, 6.5 - Zulu, 
7.7 - Stefania, 7.8 - João, 5.0 - Romeu, 7.2 - Pompilho, 
3.1 - Reinaldo, 7.3 - Bernadete, 4.7 - Cinério 
7.[2-9]\s+-\s+[A-Z][a-zã]+
7\.[2-9]\s+-\s+[^,]+


10 - Bruce, 9.5 - Miranda, 
7.9    - Bob, 10 - Zimbabue, 
7.5 - Bety
[7]\.[5-9]\s+-\s+\w+

BALEIRO GARROTE SERROTE GOLEIRO ROTEIRO 
GARROTE, SERROTE e ROTEIRO
[A-Z]*ROT[A-Z]+
BALEIRO GOLEIRO
[A-Z]*LE[A-Z]+

?classes+poderosas*
[a-z?*+]+

O username precisa ser da seguinte forma:
O limite é de 10 caracteres;
O primeiro caractere deve ser uma letra do alfabeto, não pode ser um número;
A partir do segundo caractere podemos ter letras maiúsculas, minúsculas e números;
[a-zA-Z][a-zA-Z0-9]{0,9}

___________________________________________________________________________________________
http://127.0.0.1:5500/index.html
^http.+\.html$

___________________________________________________________________________________________
Dada a seguinte regex, que encontra o número de um CPF: ^\d{3}\.\d{3}\.\d{3}-\d{2}$. Qual das strings abaixo é compatível com ela?
111.111.111-11

(^) é uma âncora e garante que na string nada deve vir antes, por isso a string CPF: 111.111.111-11 não é compatível, pois antes do número do CPF há o trecho CPF:. Já o $ é o contrário, nada na string deve vir depois, por isso a string 111.111.111-11 é o número do meu CPF também não é compatível, pois depois do número do CPF há o trecho é o número do meu CPF.

Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure
^Caused by:.*


Qual das regex abaixo capturaria exatamente as strings de data que seguem o modelo: Data: dia/mes/ano ou Data:dia/mes/ano?
Alvos: Data: 02/09/1964 ou Data:02/09/1964.
Se tiver com dúvida, use o nosso testador.

^Data:?\s?[0-9]{2}\/[0-9]{2}\/[0-9]{4}$


A string index.htmlx não será capturada pois a regex, através da âncora $, não admite nada após a expressão .html.
.*\.html$


português proporcional compor
\Bpor\B

([1-3]?\d)\s+(de+\s+)?([A-Z]?[a-zç]{3,8})\s+?(de\s+)?([12]\d{3})

\d{3}[-.]?\d{3}[.-]?\d{3}[.-]?(\d{2})

Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure
(^Caused by:)(.*)
(Caused[\s\w:.]+):([\w\s]+)
(Caused[\s\w:.]+:)(.*)


Por exemplo:

super.mario@caelum.com.br extrai super.mario
donkey.kong@alura.com.br extrai donkey.kong
bowser1@alura.com.br extrai bowser1

([a-z.]{4,14}[a-z\d})@(?:caelum.com.br|alura.com.br)
([a-z.]{4,14}[a-z\d])@(?:caelum.com.br|alura.com.br)


Seguem alguns emails que devem ser pegos pela regex:

donkey.kong@kart.com.br
bowser1@games.info 
super-mario@nintendo.JP
TEAM.donkey-kong@MARIO.kart1.nintendo.com
E aqui alguns exemplos do que não pegar:

toad@kart...com
wario@kart@nintendo.com
yoshi@nintendo
daisy@nintendo.b
..@email.com

^([\w-]\.?)+@([\w-]+\.)+([A-Za-z]{2,4})+$



Nico Steppat|14/05/1977|Rua Buarque de Macedo|50|22222-222|Rio de Janeiro
Romulo Henrique|14/06/1993|Rua do Lins|120|12345-322|Rio de Janeiro
Leonardo Cordeiro|01/01/1995|Rua de Campo Grande|01|00001-234|Rio de Janeiro

Nome|data/de/nascimento|Rua onde mora|numero|cep|Cidade

Nome era necessário capturar, então iremos criar um grupo ([\w\s]+)\|

Data de nascimento não era necessário, por isso, deixaremos esse grupo como non-capturing group (?:\d\d\/\d\d\/\d\d\d\d)\|

Rua Onde Mora é necessário capturar, e por isso, criamos um grupo normal: ([\w\s]+)\|

Número é necessário capturar, portanto: (\d{1,4})\|

CEP é necessário capturar, e podemos criar um grupo dessa maneira: (\d{5}-\d{3})\|

Cidade é a nossa última análise, e não é necessária. Portanto, basta adicionarmos ?: para deixar o seu grupo não-capturável: (?:[\w\s]{10,})

([\w\s]+)\|(?:\d\d\/\d\d\/\d\d\d\d)\|([\w\s]+)\|(\d{1,4})\|(\d{5}-\d{3})\|(?:[\w\s]{10,})
^([\w\s]+)\|(?:\d\d\/\d\d\/\d\d\d\d)\|([\w\s]+)\|(\d{1,4})\|(\d{5}-\d{3})\|(?:[\w\s]{10,})$

<h1 class="text-left">Expressões regulares</h1>
<h1.+?>([\s\wõçã]+)</h1>

Para deixar a regex (o quantifier) preguiçoso usamos ?: [a-z]+?
Repare que a regex seleciona um caractere por vez, temos 5 matches no caso do alvo alura:

Teste também o mesmo alvo com a regex:
Gananciosa: [a-z]{1,5}
Preguiçosa: [a-z]{1,5}?

<h1 class="text-left">Expressões regulares</h1>
<(h1|h2).+?>([\s\wõçã]+)</\1>

<p1> ... </p1>
<(p[1-9])>.*<\/\1>

Z171PZ7AZ23PZ7819AZ78GZ1AZ99IZ34O

